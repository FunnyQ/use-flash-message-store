{"mappings":";;AAAA;ACAA,MAAM,oCAAc,GAAG;IACrB,OAAO,EAAE,MAAM;IACf,MAAM,EAAE,OAAO;CAChB;AACD,MAAM,iCAAW,GAAG;IAClB,GAAG,EAAE,YAAY;IACjB,MAAM,EAAE,QAAQ;CACjB;AAED,MAAM,qCAAe,GAAG,CAAC,WAA+B,GAAK;IAC3D,gEAAgE;IAChE,OAAO,oCAAc,CAAC,WAAW,CAAC,IAAI,WAAW,CAAA;CAClD;AACD,MAAM,kCAAY,GAAG,CAAC,QAA4B,GAAK;IACrD,gEAAgE;IAChE,OAAO,iCAAW,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAA;CACzC;AAEM,MAAM,yCAAe,GAAG,CAAC,IAE/B,GAA0D;IACzD,MAAM,SAAS,GAAG;QAChB,QAAQ,EAAE,qCAAe,CAAC,IAAI,CAAC,IAAI,CAAC;QACpC,MAAM,EAAE,IAAI,CAAC,OAAO;QACpB,KAAK,EAAE,kCAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;KACnC;IACD,OAAO,IAAI,CAAC,QAAQ;IACpB,OAAO,IAAI,CAAC,IAAI;IAChB,OAAO,IAAI,CAAC,OAAO;IAEnB,OAAO;QAAE,GAAG,SAAS;QAAE,GAAG,IAAI;KAAE,CAAA;CACjC;;;AD5BD,MAAM,qCAAe,GAAiB;IACpC,IAAI,EAAE,SAAS;IACf,OAAO,EAAE,EAAE;IACX,QAAQ,EAAE,KAAK;CAChB;AAED,MAAM,6CAAuB,GAAG,CAC9B,YAAkC,GACjB;IACjB,OAAO;QAAE,GAAG,qCAAe;QAAE,GAAG,YAAY;KAAE,CAAA;CAC/C;AAED;;GAEG,CACH,MAAM,0CAAoB,GAAG,CAC3B,QAA6C,EAC7C,OAAiB,GACR;IACT,OAAO,CAAC,CAAC,KAAgB,GAAK;QAC5B,KAAK,CAAC,wBAAwB,GAAG,QAAQ;KAC1C,CAAC;CACH;AAED,MAAM,kDAA4B,GAAG,CACnC,KAAyB,EACzB,YAA0B,GACvB;IACH,OAAQ,KAAK,CAAC,WAAW;QACvB,KAAK,OAAO;YACV,OAAO,YAAY,CAAA;QACrB,KAAK,UAAU;YACb,OAAO,CAAA,GAAA,yCAAe,CAAA,CAAC,YAAY,CAAC,CAAA;QACtC;YACE,OAAO,YAAY,CAAA;KACtB;CACF;AAED;;GAEG,CACH,MAAM,qCAAe,GAAG,CAAC,KAAyB,GAAK;IACrD,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,YAA0B,GAAK;QAChD,IAAI,CAAC,CAAC,KAAK,CAAC,wBAAwB,EAAE;YACpC,KAAK,CAAC,wBAAwB,CAC5B,kDAA4B,CAAC,KAAK,EAAE,YAAY,CAAC,CAClD;YACD,KAAK,CAAC,KAAK,EAAE;SACd,MACC,OAAO,CAAC,KAAK,CACX,uFAAuF,CACxF;KAEJ,CAAC;CACH;AAGM,MAAM,wCAAoB,GAAG,CAAA,GAAA,kBAAW,CAAA,CAAC,2BAA2B,EAAE;IAC3E,KAAK,EAAE,IAAiB;QACtB,OAAO;YACL,KAAK,EAAE,EAAE;YACT,wBAAwB,EAAE,SAAS;YACnC,WAAW,EAAE,OAAO;SACrB,CAAA;KACF;IAED,OAAO,EAAE;QACP;;OAEG,CACH,GAAG,EAAC,KAAK,EAAkB;YACzB,OAAO,KAAK,CAAC,KAAK,CAAA;SACnB;KACF;IAED,OAAO,EAAE;QACP;;;OAGG,CACH,IAAI,EACF,eAAiD,EACjD,QAA6C,EAC7C;YACA,eAAe,IACb,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,GAAM,KAAK,CAAC,WAAW,GAAG,eAAe,AAAC,CAAC;YAC/D,0CAAoB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC;YAE3C,IAAI,CAAC,UAAU,CAAC,IAAM;gBACpB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,OAAM;gBAElC,qCAAe,CAAC,IAAI,CAAC;aACtB,CAAC;YAEF,qCAAe,CAAC,IAAI,CAAC;SACtB;QAED;;OAEG,CACH,GAAG,EAAC,YAAkC,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,6CAAuB,CAAC,YAAY,CAAC,CAAC;SACvD;QAED;;OAEG,CACH,GAAG,EAAC,aAAqC,EAAE;YACzC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,GAAK;gBAC/C,OAAO,6CAAuB,CAAC,YAAY,CAAC,CAAA;aAC7C,CAAC;SACH;QAED;;OAEG,CACH,KAAK,IAAG;YACN,IAAI,CAAC,KAAK,GAAG,EAAE;SAChB;KACF;CACF,CAAC;IAEF,wCAAmC,GAApB,wCAAoB","sources":["src/index.ts","src/primevue_adapter.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { primevueAdapter } from './primevue_adapter'\n\nconst DEFAULT_MESSAGE: FlashMessage = {\n  type: 'success',\n  message: '',\n  position: 'top'\n}\n\nconst mergeWithDefaultMessage = (\n  flashMessage: FlashMessageArgument\n): FlashMessage => {\n  return { ...DEFAULT_MESSAGE, ...flashMessage }\n}\n\n/**\n * set callback function\n */\nconst showFlashMessageWith = (\n  callback: (flashMessage: FlashMessage) => any,\n  patcher: Function\n): void => {\n  patcher((state: RootState) => {\n    state.showFlashMessageFunction = callback\n  })\n}\n\nconst convertFlashMessageArguments = (\n  store: IFlashMessageStore,\n  flashMessage: FlashMessage\n) => {\n  switch (store.uiFramework) {\n    case 'buefy':\n      return flashMessage\n    case 'primevue':\n      return primevueAdapter(flashMessage)\n    default:\n      return flashMessage\n  }\n}\n\n/**\n * display messages in View, with function that provided from vue component.\n */\nconst showAllMessages = (store: IFlashMessageStore) => {\n  store.all.forEach((flashMessage: FlashMessage) => {\n    if (!!store.showFlashMessageFunction) {\n      store.showFlashMessageFunction(\n        convertFlashMessageArguments(store, flashMessage)\n      )\n      store.clear()\n    } else {\n      console.error(\n        '[FlashMessageStore] please define `showFlashMessageFunction` use `init` action first.'\n      )\n    }\n  })\n}\n\n// store definition\nexport const useFlashMessageStore = defineStore('[odd] flash-message-store', {\n  state: (): RootState => {\n    return {\n      queue: [],\n      showFlashMessageFunction: undefined,\n      uiFramework: 'buefy'\n    }\n  },\n\n  getters: {\n    /**\n     * list all flash messages in an array\n     */\n    all(state): FlashMessage[] {\n      return state.queue\n    }\n  },\n\n  actions: {\n    /**\n     * initializing flash message store. if any change happen to `queue` and include new messages, `showAllMessages`\n     * will been called for display messages in View.\n     */\n    init(\n      uiFrameworkName: 'buefy' | 'primevue' | undefined,\n      callback: (flashMessage: FlashMessage) => any\n    ) {\n      uiFrameworkName &&\n        this.$patch((state) => (state.uiFramework = uiFrameworkName))\n      showFlashMessageWith(callback, this.$patch)\n\n      this.$subscribe(() => {\n        if (this.queue.length <= 0) return\n\n        showAllMessages(this)\n      })\n\n      showAllMessages(this)\n    },\n\n    /**\n     * add a message into flash message queue\n     */\n    add(flashMessage: FlashMessageArgument) {\n      this.queue.push(mergeWithDefaultMessage(flashMessage))\n    },\n\n    /**\n     * assign flash message array into queue directly.\n     */\n    set(flashMessages: FlashMessageArgument[]) {\n      this.queue = flashMessages.map((flashMessage) => {\n        return mergeWithDefaultMessage(flashMessage)\n      })\n    },\n\n    /**\n     * remove all messages\n     */\n    clear() {\n      this.queue = []\n    }\n  }\n})\n\nexport default useFlashMessageStore\n","const MessageTypeMap = {\n  warning: 'warn',\n  danger: 'error'\n}\nconst PositionMap = {\n  top: 'top-center',\n  bottom: 'center'\n}\n\nconst convertSeverity = (messageType: string | undefined) => {\n  // @ts-ignore will return original value if type not in the map.\n  return MessageTypeMap[messageType] || messageType\n}\nconst convertGroup = (position: string | undefined) => {\n  // @ts-ignore will return original value if type not in the map.\n  return PositionMap[position] || position\n}\n\nexport const primevueAdapter = (args: {\n  [k: string]: string\n}): { severity: string; detail: string; group: string } => {\n  const converted = {\n    severity: convertSeverity(args.type),\n    detail: args.message,\n    group: convertGroup(args.position)\n  }\n  delete args.position\n  delete args.type\n  delete args.message\n\n  return { ...converted, ...args }\n}\n"],"names":[],"version":3,"file":"module.js.map"}