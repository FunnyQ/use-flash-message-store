{"mappings":";;AAAA;ACuCA,MAAM,4CAAsB;IAAC;IAAQ;IAAW;CAAW;AAC3D,MAAM,uCAAuC;IAC3C,SAAS;IACT,QAAQ;AACV;AACA,MAAM,oCAAoC;IACxC,KAAK;IACL,QAAQ;AACV;AAEA,MAAM,wCAAkB,CAAC,cAAwB;IAC/C,OAAO,oCAAc,CAAC,YAAY,IAAI;AACxC;AACA,MAAM,qCAAe,CAAC,WAAqB;IACzC,OAAO,iCAAW,CAAC,SAAS,IAAI;AAClC;AAEO,MAAM,4CAAkB,CAC7B,oBACyB;IACzB,IAAI,OAAO;QAAE,GAAG,iBAAiB;IAAC;IAClC,MAAM,YAAY;QAChB,UAAU,sCAAgB,KAAK,IAAI;QACnC,QAAQ,KAAK,OAAO;QACpB,OAAO,mCAAa,KAAK,QAAQ;IACnC;IAEA,wBAAwB;IACxB,OAAO,IAAI,CAAC,MACT,MAAM,CAAC,CAAC,MAAQ,CAAC,0CAAoB,QAAQ,CAAC,MAC9C,OAAO,CAAC,CAAC,MAAQ,OAAO,IAAI,CAAC,IAAI;IAEpC,OAAO;QAAE,GAAG,SAAS;QAAE,GAAG,IAAI;IAAC;AACjC;;;ADrEO,MAAM,4CAAgC;IAC3C,MAAM;IACN,SAAS;IACT,UAAU;AACZ;AAEA,MAAM,gDAA0B,CAC9B,eACiB;IACjB,OAAO;QAAE,GAAG,yCAAe;QAAE,GAAG,YAAY;IAAC;AAC/C;AAEA;;CAEC,GACD,MAAM,6CAAuB,CAC3B,UACA,UACS;IACT,QAAQ,CAAC,QAAqB;QAC5B,MAAM,wBAAwB,GAAG;IACnC;AACF;AAEA,MAAM,qDAA+B,CACnC,OACA,eACG;IACH,OAAQ,MAAM,WAAW;QACvB,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO,CAAA,GAAA,yCAAc,EAAE;QACzB;YACE,QAAQ,IAAI,CACV,CAAC,6DAA6D,EAAE,MAAM,WAAW,CAAC,sCAAsC,CAAC;YAE3H,OAAO;IACX;AACF;AAEA;;CAEC,GACD,MAAM,wCAAkB,CAAC,QAA8B;IACrD,MAAM,GAAG,CAAC,OAAO,CAAC,CAAC,eAA+B;QAChD,IAAI,CAAC,CAAC,MAAM,wBAAwB,EAAE;YACpC,MAAM,wBAAwB,CAC5B,mDAA6B,OAAO;YAEtC,MAAM,KAAK;QACb,OACE,QAAQ,KAAK,CACX;IAGN;AACF;AAGO,MAAM,2CAAuB,CAAA,GAAA,kBAAU,EAAE,6BAA6B;IAC3E,OAAO,IAAiB;QACtB,OAAO;YACL,OAAO,EAAE;YACT,0BAA0B;YAC1B,aAAa;QACf;IACF;IAEA,SAAS;QACP;;KAEC,GACD,KAAI,KAAK,EAAkB;YACzB,OAAO,MAAM,KAAK;QACpB;IACF;IAEA,SAAS;QACP;;;KAGC,GACD,MACE,eAAiD,EACjD,QAA6C,EAC7C;YACA,mBACE,IAAI,CAAC,MAAM,CAAC,CAAC,QAAW,MAAM,WAAW,GAAG;YAC9C,2CAAqB,UAAU,IAAI,CAAC,MAAM;YAE1C,IAAI,CAAC,UAAU,CAAC,IAAM;gBACpB,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG;gBAE5B,sCAAgB,IAAI;YACtB;YAEA,sCAAgB,IAAI;QACtB;QAEA;;KAEC,GACD,KAAI,YAAkC,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,8CAAwB;QAC1C;QAEA;;KAEC,GACD,KAAI,aAAqC,EAAE;YACzC,IAAI,CAAC,KAAK,GAAG,cAAc,GAAG,CAAC,CAAC,eAAiB;gBAC/C,OAAO,8CAAwB;YACjC;QACF;QAEA;;KAEC,GACD,SAAQ;YACN,IAAI,CAAC,KAAK,GAAG,EAAE;QACjB;IACF;AACF;IAEA,2CAAe","sources":["src/index.ts","src/primevue_adapter.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { primevueAdapter } from './primevue_adapter'\n\nexport const DEFAULT_MESSAGE: FlashMessage = {\n  type: 'success',\n  message: '',\n  position: 'top'\n}\n\nconst mergeWithDefaultMessage = (\n  flashMessage: FlashMessageArgument\n): FlashMessage => {\n  return { ...DEFAULT_MESSAGE, ...flashMessage }\n}\n\n/**\n * set callback function\n */\nconst showFlashMessageWith = (\n  callback: (flashMessage: FlashMessage) => any,\n  patcher: Function\n): void => {\n  patcher((state: RootState) => {\n    state.showFlashMessageFunction = callback\n  })\n}\n\nconst convertFlashMessageArguments = (\n  store: IFlashMessageStore,\n  flashMessage: FlashMessage\n) => {\n  switch (store.uiFramework) {\n    case 'buefy':\n      return flashMessage\n    case 'primevue':\n      return primevueAdapter(flashMessage)\n    default:\n      console.info(\n        `[odd][useFlashMessage] There is no adapter for UI Framework '${store.uiFramework}'. We'll use original argument format,`\n      )\n      return flashMessage\n  }\n}\n\n/**\n * display messages in View, with function that provided from vue component.\n */\nconst showAllMessages = (store: IFlashMessageStore) => {\n  store.all.forEach((flashMessage: FlashMessage) => {\n    if (!!store.showFlashMessageFunction) {\n      store.showFlashMessageFunction(\n        convertFlashMessageArguments(store, flashMessage)\n      )\n      store.clear()\n    } else {\n      console.error(\n        '[FlashMessageStore] please define `showFlashMessageFunction` use `init` action first.'\n      )\n    }\n  })\n}\n\n// store definition\nexport const useFlashMessageStore = defineStore('[odd] flash-message-store', {\n  state: (): RootState => {\n    return {\n      queue: [],\n      showFlashMessageFunction: undefined,\n      uiFramework: 'buefy'\n    }\n  },\n\n  getters: {\n    /**\n     * list all flash messages in an array\n     */\n    all(state): FlashMessage[] {\n      return state.queue\n    }\n  },\n\n  actions: {\n    /**\n     * initializing flash message store. if any change happen to `queue` and include new messages, `showAllMessages`\n     * will been called for display messages in View.\n     */\n    init(\n      uiFrameworkName: 'buefy' | 'primevue' | undefined,\n      callback: (flashMessage: FlashMessage) => any\n    ) {\n      uiFrameworkName &&\n        this.$patch((state) => (state.uiFramework = uiFrameworkName))\n      showFlashMessageWith(callback, this.$patch)\n\n      this.$subscribe(() => {\n        if (this.queue.length <= 0) return\n\n        showAllMessages(this)\n      })\n\n      showAllMessages(this)\n    },\n\n    /**\n     * add a message into flash message queue\n     */\n    add(flashMessage: FlashMessageArgument) {\n      this.queue.push(mergeWithDefaultMessage(flashMessage))\n    },\n\n    /**\n     * assign flash message array into queue directly.\n     */\n    set(flashMessages: FlashMessageArgument[]) {\n      this.queue = flashMessages.map((flashMessage) => {\n        return mergeWithDefaultMessage(flashMessage)\n      })\n    },\n\n    /**\n     * remove all messages\n     */\n    clear() {\n      this.queue = []\n    }\n  }\n})\n\nexport default useFlashMessageStore\n","type flashMessageArgument = { [key: string]: string }\ntype primevueToastMessage = {\n  /**\n   * Severity level of the message.\n   * Default value is 'info'.\n   */\n  severity?: any | undefined\n  /**\n   * Summary content of the message.\n   */\n  summary?: string | undefined\n  /**\n   * Detail content of the message.\n   */\n  detail?: any | undefined\n  /**\n   * Whether the message can be closed manually using the close icon.\n   * Default value is true.\n   */\n  closable?: boolean | undefined\n  /**\n   * Delay in milliseconds to close the message automatically.\n   * Default value is 3000.\n   */\n  life?: number | undefined\n  /**\n   * Key of the Toast to display the message.\n   */\n  group?: string | undefined\n  /**\n   * Style class of the message.\n   */\n  styleClass?: any\n  /**\n   * Style class of the content.\n   */\n  contentStyleClass?: any\n}\n\nconst convertRequiredKeys = ['type', 'message', 'position']\nconst messageTypeMap: flashMessageArgument = {\n  warning: 'warn',\n  danger: 'error'\n}\nconst positionMap: flashMessageArgument = {\n  top: 'top-center',\n  bottom: 'bottom-center'\n}\n\nconst convertSeverity = (messageType: string) => {\n  return messageTypeMap[messageType] || messageType\n}\nconst convertGroup = (position: string) => {\n  return positionMap[position] || position\n}\n\nexport const primevueAdapter = (\n  originalArguments: flashMessageArgument\n): primevueToastMessage => {\n  let args = { ...originalArguments }\n  const converted = {\n    severity: convertSeverity(args.type),\n    detail: args.message,\n    group: convertGroup(args.position)\n  }\n\n  // remove converted keys\n  Object.keys(args)\n    .filter((key) => !convertRequiredKeys.includes(key))\n    .forEach((key) => delete args[key])\n\n  return { ...converted, ...args }\n}\n"],"names":[],"version":3,"file":"module.mjs.map"}