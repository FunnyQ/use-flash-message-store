{"mappings":"ACqDA,OAAO,MAAM,oBAAoB;IAU7B;;OAEG;;;;;;;;;gEACS,YAAY,EAAE;;IAM1B;;;OAGG;0BAEgB,OAAO,GAAG,UAAU,GAAG,SAAS,2BACxB,YAAY,KAAK,GAAG;IAe/C;;OAEG;sBACe,oBAAoB;IAItC;;OAEG;uBACgB,oBAAoB,EAAE;IAMzC;;OAEG;;EAKL,CAAA;AAEF,eAAe,oBAAoB,CAAA","sources":["src/src/primevue_adapter.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,"import { defineStore } from 'pinia'\nimport { primevueAdapter } from './primevue_adapter'\n\nconst DEFAULT_MESSAGE: FlashMessage = {\n  type: 'success',\n  message: '',\n  position: 'top'\n}\n\nconst mergeWithDefaultMessage = (\n  flashMessage: FlashMessageArgument\n): FlashMessage => {\n  return { ...DEFAULT_MESSAGE, ...flashMessage }\n}\n\n/**\n * set callback function\n */\nconst showFlashMessageWith = (\n  callback: (flashMessage: FlashMessage) => any,\n  patcher: Function\n): void => {\n  patcher((state: RootState) => {\n    state.showFlashMessageFunction = callback\n  })\n}\n\nconst convertFlashMessageArguments = (\n  store: IFlashMessageStore,\n  flashMessage: FlashMessage\n) => {\n  switch (store.uiFramework) {\n    case 'buefy':\n      return flashMessage\n    case 'primevue':\n      return primevueAdapter(flashMessage)\n    default:\n      return flashMessage\n  }\n}\n\n/**\n * display messages in View, with function that provided from vue component.\n */\nconst showAllMessages = (store: IFlashMessageStore) => {\n  store.all.forEach((flashMessage: FlashMessage) => {\n    // @ts-ignore\n    store.showFlashMessageFunction(convertFlashMessageArguments(flashMessage))\n  })\n  store.clear()\n}\n\n// store definition\nexport const useFlashMessageStore = defineStore('[odd] flash-message-store', {\n  state: (): RootState => {\n    return {\n      queue: [],\n      showFlashMessageFunction: undefined,\n      uiFramework: 'buefy'\n    }\n  },\n\n  getters: {\n    /**\n     * list all flash messages in an array\n     */\n    all(state): FlashMessage[] {\n      return state.queue\n    }\n  },\n\n  actions: {\n    /**\n     * initializing flash message store. if any change happen to `queue` and include new messages, `showAllMessages`\n     * will been called for display messages in View.\n     */\n    init(\n      uiFrameworkName: 'buefy' | 'primevue' | undefined,\n      callback: (flashMessage: FlashMessage) => any\n    ) {\n      uiFrameworkName &&\n        this.$patch((state) => (state.uiFramework = uiFrameworkName))\n      showFlashMessageWith(callback, this.$patch)\n\n      this.$subscribe(() => {\n        if (this.queue.length <= 0) return\n\n        showAllMessages(this)\n      })\n\n      showAllMessages(this)\n    },\n\n    /**\n     * add a message into flash message queue\n     */\n    add(flashMessage: FlashMessageArgument) {\n      this.queue.push(mergeWithDefaultMessage(flashMessage))\n    },\n\n    /**\n     * assign flash message array into queue directly.\n     */\n    set(flashMessages: FlashMessageArgument[]) {\n      this.queue = flashMessages.map((flashMessage) => {\n        return mergeWithDefaultMessage(flashMessage)\n      })\n    },\n\n    /**\n     * remove all messages\n     */\n    clear() {\n      this.queue = []\n    }\n  }\n})\n\nexport default useFlashMessageStore\n"],"names":[],"version":3,"file":"types.d.ts.map"}